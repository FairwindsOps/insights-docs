(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{387:function(e,t,a){"use strict";a.r(t);var s=a(42),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"opa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opa"}},[e._v("#")]),e._v(" OPA")]),e._v(" "),a("p",[e._v("Fairwinds Insights supports the use of custom OPA policies to create Action Items.")]),e._v(" "),a("h2",{attrs:{id:"enable-the-opa-agent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enable-the-opa-agent"}},[e._v("#")]),e._v(" Enable the OPA agent")]),e._v(" "),a("p",[e._v("To enable OPA, make sure you pass "),a("code",[e._v("--set opa.enabled=true")]),e._v(" when\n"),a("a",{attrs:{href:"/installation/insights-agent"}},[e._v("installing the insights-agent")])]),e._v(" "),a("h2",{attrs:{id:"designing-policies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#designing-policies"}},[e._v("#")]),e._v(" Designing Policies")]),e._v(" "),a("blockquote",[a("p",[e._v("You may want to familiarize yourself with\n"),a("a",{attrs:{href:"https://www.openpolicyagent.org/docs/latest/policy-language/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rego"),a("OutboundLink")],1),e._v(",\nthe policy language used by OPA.")])]),e._v(" "),a("p",[e._v("Each Rego policy will recieve an "),a("code",[e._v("input")]),e._v(" parameter, which contains\na Kubernetes resource.")]),e._v(" "),a("p",[e._v("For example, we can check to make sure that "),a("code",[e._v("replicas")]),e._v(" is set on all "),a("code",[e._v("Deployments")])]),e._v(" "),a("div",{staticClass:"language-rego extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("package fairwinds\n\nreplicasRequired[actionItem] {\n  input.spec.replicas == 0\n  actionItem := {}\n}\n")])])]),a("p",[e._v("The "),a("code",[e._v("actionItem")]),e._v(" object is what Insights will examine to determine the details of the\nissue. The following fields can be set:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("title")]),e._v(" - a short title for the Action Item")]),e._v(" "),a("li",[a("code",[e._v("description")]),e._v(" - a longer description of the issue. Can include markdown.")]),e._v(" "),a("li",[a("code",[e._v("remediation")]),e._v(" - instructions for fixing the issue. Can include markdown.")]),e._v(" "),a("li",[a("code",[e._v("category")]),e._v(" - can be Security, Efficiency, or Reliability")]),e._v(" "),a("li",[a("code",[e._v("severity")]),e._v(" - between 0.0 and 1.0. > .66 will become a "),a("code",[e._v("danger")]),e._v(" item")])]),e._v(" "),a("p",[e._v("For instance, on our check above, we could set:")]),e._v(" "),a("div",{staticClass:"language-rego extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package fairwinds\n\nreplicasRequired[actionItem] {\n  input.spec.replicas == 0\n  actionItem := {\n    "title": concat(" ", [input.kind, "does not have replicas set"]),\n    "description": "All workloads at acme-co must explicitly set the number of replicas. [Read more](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment)",\n    "remediation": "Please set `spec.replicas`",\n    "category": "Reliability",\n    "severity": 0.5\n  }\n}\n')])])]),a("h2",{attrs:{id:"uploading-policies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uploading-policies"}},[e._v("#")]),e._v(" Uploading Policies")]),e._v(" "),a("blockquote",[a("p",[e._v("You must be an admin for your organization in order to manage policies")])]),e._v(" "),a("p",[e._v("To add your policies to Insights, you'll need to use the "),a("a",{attrs:{href:"/features/cli"}},[e._v("Insights CLI")]),e._v(".\nYou'll also need your API key, which an organization admin can find your on your organization's\nsettings page.")]),e._v(" "),a("p",[e._v("The Insights CLI expects each policy to live in its own directory, alongside\nthe rules that dictate where the rule should be applied.")]),e._v(" "),a("p",[e._v("To upload our "),a("code",[e._v("replicasRequired")]),e._v(" check, we start by creating "),a("code",[e._v("./replicas/policy.rego")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-rego extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package fairwinds\n\nreplicasRequired[actionItem] {\n  input.spec.replicas == 0\n  actionItem := {\n    "title": concat(" ", [input.kind, "does not have replicas set"]),\n    "description": "All workloads at acme-co must explicitly set the number of replicas. [Read more](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment)",\n    "remediation": "Please set `spec.replicas`",\n    "category": "Reliability",\n    "severity": 0.5\n  }\n}\n')])])]),a("p",[e._v("Next, we'll create "),a("code",[e._v("./replicas/deployments.yaml")]),e._v(" to tell Insights that this policy\nshould be applied to all Deployments:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("targets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiGroups")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"apps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kinds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Deployment"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("p",[e._v("Finally, we can upload our policies using the CLI:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("FAIRWINDS_TOKEN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("YOUR_TOKEN insights policy "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sync")]),e._v(" --organization your-org-name -d "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])])]),a("p",[e._v("To see a full list of your organization's policies, you can run:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("FAIRWINDS_TOKEN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("YOUR_TOKEN insights policy list --organization your-org-name\n")])])]),a("h2",{attrs:{id:"syncing-policies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syncing-policies"}},[e._v("#")]),e._v(" Syncing Policies")]),e._v(" "),a("p",[e._v("The sync functionality expects a directory structure like the following:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".\n+-- policy1\n|   +-- policy.yaml\n|   +-- instance1.yaml\n+-- policy2\n|   +-- policy.rego\n|   +-- instance1.yaml\n")])])]),a("p",[e._v("Running "),a("code",[e._v("insights policy sync")]),e._v(" from the root directory will upload any new/changed policies\nto the Insights API, and start applying them to each of your clusters.")]),e._v(" "),a("h3",{attrs:{id:"full-sync"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#full-sync"}},[e._v("#")]),e._v(" Full Sync")]),e._v(" "),a("p",[e._v("If you'd like your Git repository to be the sole source of truth for which policies\nare kept in Insights, you can add the "),a("code",[e._v("--fullsync")]),e._v(" flag when running "),a("code",[e._v("insights policy sync")]),e._v(".\nThis will "),a("em",[e._v("delete")]),e._v(" policies that are not present in your local directory, in addition\nto uploading new or changed policies.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("FAIRWINDS_TOKEN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("YOUR_TOKEN insights policy "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sync")]),e._v(" --organization your-org-name -d "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" --fullsync\n")])])]),a("h2",{attrs:{id:"testing-your-policies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testing-your-policies"}},[e._v("#")]),e._v(" Testing your Policies")]),e._v(" "),a("p",[e._v("After uploading new checks, it's good to test that they're working properly. To do so, you can\nmanually create a one-off report:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubectl create job my-opa-test --from=cronjob/opa -n insights-agent\n")])])]),a("p",[e._v("Watch the logs for the resulting Job to spot any potential errors in your work.")]),e._v(" "),a("h2",{attrs:{id:"reusing-rego-policies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reusing-rego-policies"}},[e._v("#")]),e._v(" Reusing Rego Policies")]),e._v(" "),a("p",[e._v("You can reuse the same Rego policy, setting different ActionItem attributes in different cases.\nFor instance, say we wanted to apply our "),a("code",[e._v("replicas")]),e._v(" policy above to both "),a("code",[e._v("Deployments")]),e._v(" and "),a("code",[e._v("StatefulSets")]),e._v(",\nbut wanted a higher severity for "),a("code",[e._v("Deployments")]),e._v(".")]),e._v(" "),a("p",[e._v("First, we'd stop specifying "),a("code",[e._v("severity")]),e._v(" inside our OPA, so that it can be set by the instance:\n"),a("strong",[e._v("replicas.rego")])]),e._v(" "),a("div",{staticClass:"language-rego extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package fairwinds\n\nreplicasRequired[actionItem] {\n  input.spec.replicas == 0\n  actionItem := {\n    "title": concat(" ", [input.kind, "does not have replicas set"]),\n    "description": "All workloads at acme-co must explicitly set the number of replicas. [Read more](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment)",\n    "remediation": "Please set `spec.replicas`",\n    "category": "Reliability",\n  }\n}\n')])])]),a("p",[e._v("Next, we'd create two instances:\n"),a("strong",[e._v("deployments.yaml")])]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("output")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("severity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".9")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("targets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiGroups")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"apps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kinds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Deployment"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("p",[a("strong",[e._v("statefulSets.yaml")])]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("output")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("severity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".4")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("targets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiGroups")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"apps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kinds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"StatefulSet"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("h3",{attrs:{id:"parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),a("p",[e._v("We can also pass parameters to our instances. Say, for instance, that we wanted all Deployments to have at least 3 replicas,\nbut StatefulSets were OK with a single replica. Then we could write:")]),e._v(" "),a("div",{staticClass:"language-rego extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package fairwinds\n\nreplicasRequired[actionItem] {\n  input.spec.replicas < input.parameters.minReplicas\n  actionItem := {\n    "title": concat(" ", [input.kind, "does not have enough replicas set"]),\n    "description": "All workloads at acme-co must explicitly set the number of replicas. [Read more](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment)",\n    "remediation": "Please set `spec.replicas`",\n    "category": "Reliability",\n  }\n}\n')])])]),a("p",[a("strong",[e._v("deployments.yaml")])]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("parameters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("minReplicas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("targets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiGroups")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"apps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kinds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Deployment"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("p",[a("strong",[e._v("statefulSets.yaml")])]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("parameters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("minReplicas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("targets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiGroups")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"apps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kinds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"StatefulSet"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("h2",{attrs:{id:"using-the-kubernetes-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-kubernetes-api"}},[e._v("#")]),e._v(" Using the Kubernetes API")]),e._v(" "),a("p",[e._v("You can also cross-check resources with other Kubernetes objects. For example, we could use\nthis check to ensure that all "),a("code",[e._v("Deployments")]),e._v(" have an associated "),a("code",[e._v("HorizontalPodAutoscaler")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-rego extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package fairwinds\n\nhasMatchingHPA(hpas, elem) {\n  hpa := hpas[_]\n  hpa.spec.scaleTargetRef.kind == elem.kind\n  hpa.spec.scaleTargetRef.name == elem.metadata.name\n  hpa.metadata.namespace == elem.metadata.namespace\n  hpa.spec.scaleTargetRef.apiVersion == elem.apiVersion\n}\nhpaRequired[actionItem] {\n  not hasMatchingHPA(kubernetes("autoscaling", "HorizontalPodAutoscaler"), input)\n  actionItem := {\n    "title": "No horizontal pod autoscaler found"\n  }\n}\n')])])]),a("h2",{attrs:{id:"more-examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#more-examples"}},[e._v("#")]),e._v(" More Examples")]),e._v(" "),a("p",[e._v("You can find more examples in the "),a("a",{attrs:{href:"https://github.com/FairwindsOps/insights-plugins/tree/main/plugins/opa/examples",target:"_blank",rel:"noopener noreferrer"}},[e._v("Insights Plugins repository"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);